{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\nimport math\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ================== Custom Code ==================\n\n# Devices\nbrain = Brain()\ncontroller = Controller()\n\n# Intake motors\nintake1 = Motor(Ports.PORT7, GearSetting.RATIO_6_1, 1)\nintake2 = Motor(Ports.PORT8, GearSetting.RATIO_6_1, 1)\n\n# Drive motors\nleft_front = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nleft_middle = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nleft_back = Motor(Ports.PORT11, GearSetting.RATIO_6_1, True)\n\nright_front = Motor(Ports.PORT9, GearSetting.RATIO_6_1, False)\nright_middle = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)\nright_back = Motor(Ports.PORT20, GearSetting.RATIO_6_1, False)\n\n# Set stopping mode\nfor motor in [left_front, left_middle, left_back, right_front, right_middle, right_back, intake1]:\n    motor.set_stopping(COAST)\n\nintake2.set_stopping(COAST)  # default mode is COAST\n\n# States\nis_tank_drive = False\nprev_toggle_combo = False\n\ndrive_speed = 100  # default speed\nprev_speed_toggle = False\n\n# === Deadzone Function ===\ndef apply_deadzone(value, threshold=5):\n    return 0 if abs(value) < threshold else value\n\n# ================== Main Loop ==================\nwhile True:\n    # === Intake Control ===\n    if controller.buttonL1.pressing():\n        # L1 spins both intakes forward\n        intake1.spin(FORWARD, 100, PERCENT)\n        intake2.spin(FORWARD, 100, PERCENT)\n        intake2.set_stopping(COAST)\n    elif controller.buttonR1.pressing():\n        # R1 spins intake1 forward only\n        intake1.spin(FORWARD, 100, PERCENT)\n        intake2.stop()\n        intake2.set_stopping(HOLD)\n    elif controller.buttonR2.pressing():\n        # R2 spins both intakes reverse\n        intake1.spin(REVERSE, 100, PERCENT)\n        intake2.spin(REVERSE, 100, PERCENT)\n        intake2.set_stopping(COAST)\n    else:\n        # Both stopped\n        intake1.stop()\n        intake2.stop()\n        intake2.set_stopping(COAST)\n\n    # === Drive mode toggle (Button Y + Right) ===\n    toggle_combo = controller.buttonY.pressing() and controller.buttonRight.pressing()\n    if toggle_combo and not prev_toggle_combo:\n        is_tank_drive = not is_tank_drive\n        brain.screen.clear_screen()\n        brain.screen.print(\"Drive Mode: \" + (\"Tank\" if is_tank_drive else \"Arcade\"))\n    prev_toggle_combo = toggle_combo\n\n    # === Speed toggle (Button L2) ===\n    curr_speed_toggle = controller.buttonL2.pressing()\n    if curr_speed_toggle and not prev_speed_toggle:\n        drive_speed = 50 if drive_speed == 100 else 100\n        brain.screen.clear_screen()\n        brain.screen.print(\"Speed: \" + str(drive_speed) + \"%\")\n    prev_speed_toggle = curr_speed_toggle\n\n    # === Drive Control ===\n    if is_tank_drive:\n        # Tank drive: Axis3 = left, Axis2 = right\n        left_speed = apply_deadzone(controller.axis3.position()) * drive_speed / 100\n        right_speed = apply_deadzone(controller.axis2.position()) * drive_speed / 100\n    else:\n        # Arcade drive: Axis3 = forward/back, Axis1 = turn\n        forward = apply_deadzone(controller.axis3.position())\n        turn = apply_deadzone(controller.axis1.position())\n        left_speed = (forward + turn) * drive_speed / 100\n        right_speed = (forward - turn) * drive_speed / 100\n\n    # Apply motor power\n    for motor in [left_front, left_middle, left_back]:\n        motor.spin(FORWARD, left_speed, PERCENT)\n    for motor in [right_front, right_middle, right_back]:\n        motor.spin(FORWARD, right_speed, PERCENT)\n\n    wait(20, MSEC)\n","textLanguage":"python","robotConfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.60.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"aiVisionSettings":{"colors":[],"codes":[],"tags":true,"AIObjects":true,"AIObjectModel":[],"aiModelDropDownValue":null}}